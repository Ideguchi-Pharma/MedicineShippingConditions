1.SpannerEmulatorを起動する
新しいターミナルで下記のコマンドを実行する
docker run -p 9010:9010 -p 9020:9020 gcr.io/cloud-spanner-emulator/emulator
※このターミナルは閉じずにそのままにしておく。

2.インスタンスとデータベースを再作成する
新しいターミナルで下記のコマンドを実行する
2_1.gcloudの設定をEmulatorに向ける
gcloud config configurations activate emulator
2_2.インスタンスを再作成する
gcloud spanner instances create test-instance --config=emulator-config --description="Test Instance" --nodes=1
2_3.データベースを再作成する
gcloud spanner databases create test-database --instance=test-instance

3.テーブルを作成する(2と同じターミナルでOK)
3_1.Emulatorの接続先を教える
$env:SPANNER_EMULATOR_HOST="localhost:9010"
3_2.schema.sqlを使ってテーブルを作成する
(schema.sqlがあるディレクトリで実行する)
spanner-cli -p test-project -i test-instance -d test-database -f schema.sql

--------------これでデータベースの立ち上げは完了-------------------------------

4.プログラムの実行
プログラムがあるディレクトリで下記のコマンドを実行する
npx ts-node src/index_fetch.ts

5.プログラムの停止
Ctrl＋Cを行った後に、下記のコマンドを実行
5_1.動いているnode.exeのIDを調べる
tasklist | findstr "node"
上記を実行すると、下記の内容が表示される。
node.exe                     ***** Console                    1     30,120 K
node.exe                     ***** Console                    1     25,888 K
*****がIDとなる。
5_2.対象のnode.exeをIDで指定し、強制的に停止させる
taskkill /F /PID *****

----------------------------------------------
SpannerEmulator内のデータをターミナルに出力する

<まずはデータがちゃんと入っているか、総数を確認>
gcloud spanner databases execute-sql test-database --instance=test-instance --sql="SELECT COUNT(*) FROM MedicineShippingConditions"

<例：品名、YJコード、供給状況を10件抽出>
gcloud spanner databases execute-sql test-database --instance=test-instance --sql="SELECT product_name, yj_code, shipping_status FROM MedicineShippingConditions LIMIT 10"

<基本の型>
gcloud spanner databases execute-sql test-database --instance=test-instance --sql="[SQL命令文]"

SQL命令文
SELECT [カラム名], [カラム名], FROM MedicineShippingConditions 
カラム名は'*'と記載すると、全ての列を取り出す。
<オプション>
WHERE [カラム名] = '[検索したい文字]'
 -検索したい文字に完全一致する行だけ取り出す。
WHERE [カラム名] = LIKE '%[検索したい文字]%'　
 -曖昧検索で行の取り出しができる。
LIMIT [取り出したい行の数]
 -その行数分だけ取り出すことが出来る。
ORDER BY [カラム名]
 -[カラム名]のあいうえお順（アルファベット順）に取り出すことが出来る。
GROUP BY [カラム名]
 -[カラム名]が同じ行をグループにまとめる
COUNT(*) AS product_count
 -グループごとに行数を数え、何行あるかという結果を'product_count'という新たな行に記載する
ORDER BY product_count DESC
 -行数が多い順に並び替える。（DESC：降順）
ORDER BY updated_at DESC
 -update_atが新しい順に並び替え
WHERE [カラム名] = '[検索したい文字]' AND WHERE [カラム名] = '[検索したい文字]'
 -複数条件でデータを取り出せる。
WHERE [日付が記載されたカラム名] BETWEEN 'YYYY-MM-DD' AND 'YYYY-MM-DD'
 -期間を絞ってデータを取り出せる
SELECT COUNT(*) FROM [データベース名]
 -データベース内のデータ数を確認できる。
